https://courses.csail.mit.edu/6.042/spring18/mcs.pdf?fbclid=IwZXh0bgNhZW0CMTEAAR0QPyDrc9vDuVC6GC1pxlFdCtNTz-NLH9DBad_7hh5Ucew-Qn9YU52q4b8_aem_SIjRfuiXKgI-CaiFuBUukQ

Informally, a set is a bunch of objects, which are called the elements of the set. The elements of a set can be just about anything: numbers, points in space, or even other sets. The conventional way to write down a set is to list the elements inside curly-braces. For example, here are some sets:

ABC={Alex, Tippy, Shells, Shadow}={red, blue, yellow}={{a,b},{a,c},{b,c}}dead petsprimary colorsa set of sets
This works fine for small finite sets. Other sets might be defined by indicating how to generate a list of them:

D::={1,2,4,8,16,…}the powers of 2
The order of elements is not significant, so {x,y} and {y,x}
 are the same set written two different ways. Also, any object is, or is not, an element of a given set— there is no notion of an element appearing more than once in a set.1 So, writing {x,x}
 is just indicating the same thing twice: that x
 is in the set. In particular, {x,x}={x}.
The expression e∈S
 asserts that e
 is an element of set S
. For example, 32∈D
 and blue ∈B
, but Tailspin ∉A
—yet.

Sets are simple, flexible, and everywhere. You’ll find some set mentioned in nearly every section of this text.

Some Popular Sets
Mathematicians have devised special symbols to represent some common sets.

symbol∅NZQRCsetthe empty setnonnegative integersintegersrational numbersreal numberscomplex numberselementsnone{0,1,2,3,…}{…,−3,−2,−1,0,1,2,3,…}{12,−53,16,etc.}{π,e,−9,2–√,etc.}{i,192,2–√−2i,etc.}
A superscript "+
" restricts a set to its positive elements; for example, R+
 denotes the set of positive real numbers. Similarly, Z−
 denotes the set of negative integers.

Comparing and Combining Sets
The expression S⊆T
 indicates that set S
 is a subset of set T
, which means that every element of S
 is also an element of T
. For example, N⊆Z
 because every nonnegative integer is an integer; Q⊆R
 because every rational number is a real number, but C⊈R
 because not every complex number is a real number.

As a memory trick, think of the “⊆
” symbol as like the “≤
” sign with the smaller set or number on the left hand side. Notice that just as n≤n
 for any number n
, also S⊆S
 for any set S
.

There is also a relation, ⊂
, on sets like the “less than” relation < on numbers. S⊂T
 means that S
 is a subset of T
, but the two are not equal. So just as n≮n
 for every number n
, also A⊄A
, for every set A
. “S⊂T
 ” is read as “S
 is a strict subset of T
.”

There are several basic ways to combine sets. For example, suppose

XY::={1,2,3},::={2,3,4}.
Definition 4.1.1

The union of sets A
 and B
, denoted A∪B
, includes exactly the elements appearing in A
 or B
 or both. That is,
x∈A∪B IFF x∈A OR x∈B.
So X∪Y={1,2,3,4}.
The intersection of sets A
 and B
, denoted A∩B
, consists of all elements that appear in both A
 and B
 or both. That is,
x∈A∩B IFF x∈A AND x∈B.
So X∩Y={2,3}.
The set difference of sets A
 and B
, denoted A−B
, consists of all elements that are in A
, but not in B
 or both. That is,
x∈A−B IFF x∈A AND x∉B.
So X−Y={1} and Y−X={4}.
Often all the sets being considered are subsets of a known domain of discourse, D
. Then for any subset, A
, of D
, we define A¯¯¯¯
 to be the set of all elements of D
 not in A
. That is,

A¯¯¯¯::=D−A.
The set A¯¯¯¯
 is called the complement of A
. So

A¯¯¯¯=∅ IFF A=D.
For example, if the domain we’re working with is the integers, the complement of the nonnegative integers is the set of negative integers:

N¯¯¯¯=Z−.
We can use complement to rephrase subset in terms of equality

A⊆B is equivalent to A∩B¯¯¯¯=∅.
Power Set
The set of all the subsets of a set, A
, is called the power set, pow(A
), of A
. So

B∈pow(A) IFF B⊆A.
For example, the elements of pow({1,2})
 are ∅,{1},{2}, and {1,2}.
More generally, if A
 has n
 elements, then there are 2n
 sets in pow(A)
—see Theorem 4.5.5. For this reason, some authors use the notation 2A
 instead of pow(A)
.

Set Builder Notation
An important use of predicates is in set builder notation. We’ll often want to talk about sets that cannot be described very well by listing the elements explicitly or by taking unions, intersections, etc., of easily described sets. Set builder notation often comes to the rescue. The idea is to define a set using a predicate; in particular, the set consists of all values that make the predicate true. Here are some examples of set builder notation:

ABC::={n∈N∣n is a prime and n=4k+1 for some integer k}:={x∈R∣x3−3x+1>0}::={a+bi∈C∣a2+2b2≤1}
The set A
 consists of all nonnegative integers n
 for which the predicate

“n is a prime and n=4k+1 for some integer k”
is true. Thus, the smallest elements of A
 are:

5,13,17,29,37,41,53,61,73,…
Trying to indicate the set A
 by listing these first few elements wouldn’t work very well; even after ten terms, the pattern is not obvious! Similarly, the set B
 consists of all real numbers x
 for which the predicate

x3−3x+1>0
is true. In this case, an explicit description of the set B
 in terms of intervals would require solving a cubic equation. Finally, set C
 consists of all complex numbers a C bi such that:

a2+2b2≤1
This is an oval-shaped region around the origin in the complex plane.

Providing Set Equalities
Two sets are defined to be equal if they have exactly the same elements. That is, X=Y
 means that z∈X
 if and only if z∈Y
, for all elements, z
.2 So, set equalities can be formulated and proved as “iff” theorems. For example:

Theorem 4.1.2

[Distributive Law for Sets] Let A,B,
 and C
 be sets. Then:

A∩(B∪C)=(A∩B)∪(A∩C)(4.1.1)
Proof
Although the basic set operations and propositional connectives are similar, it’s important not to confuse one with the other. For example, ∩
 resembles textOR
, and in fact was defined directly in terms of textOR
:

x∈A∪B is equivalent to (x∈A OR x∈B).
Similarly, ∩
 resembles AND
, and complement resembles NOT
.

But if A
 and B
 are sets, writing A AND B
 is a type-error, since AND
 is an operation on truth-values, not sets. Similarly, if P
 and Q
 are propositional variables, writing P∪Q
 is another type-error.

The proof of Theorem 4.1.2 illustrates a general method for proving a set equality involving the basic set operations by checking that a corresponding propositional formula is valid. As a further example, from De Morgan’s Law (3.4.8) for propositions

NOT(P AND Q) is equivalent to P¯¯¯¯ OR Q¯¯¯¯
we can derive (Problem 4.5) a corresponding De Morgan’s Law for set equality:

A∩B¯¯¯¯¯¯¯¯¯¯¯¯¯=A¯¯¯¯∪B¯¯¯¯.(4.1.3)
Despite this correspondence between two kinds of operations, it’s important not to confuse propositional operations with set operations. For example, if X
 and Y
 are sets, then it is wrong to write “X AND Y
” instead of “X∩Y.
” Applying AND
 to sets will cause your compiler—or your grader—to throw a type error, because an operation that is only supposed to be applied to truth values has been applied to sets. Likewise, if P
 and Q
 are propositions, then it is a type error to write “P∪Q
” instead of “P OR Q
.”



Sets provide one way to group a collection of objects. Another way is in a sequence, which is a list of objects called terms or components. Short sequences are commonly described by listing the elements between parentheses; for example, ( a,b,c
 ) is a sequence with three terms.

While both sets and sequences perform a gathering role, there are several differences.

The elements of a set are required to be distinct, but terms in a sequence can be the same. Thus,  (a,b,a)
  is a valid sequence of length three, but  {a,b,a}
  is a set with two elements, not three.
The terms in a sequence have a specified order, but the elements of a set do not. For example,  (a,b,c)
 and  (a,c,b)
  are different sequences, but  {a,b,c}
  and  {a,c,b}
  are the same set.
Texts differ on notation for the empty sequence; we use  λ
  for the empty sequence.
The product operation is one link between sets and sequences. A Cartesian product of sets,  S1×S2×⋯×Sn
 , is a new set consisting of all sequences where the first component is drawn from  S1
 , the second from  S2
 , and so forth. Length two sequences are called pairs.3 For example,  N×{a,b}
  is the set of all pairs whose first element is a nonnegative integer and whose second element is an  a
  or a  b
 :

N×{a,b}={(0,a),(0,b),(1,a),(1,b),(2,a),(2,b),…}
 
A product of  n
  copies of a set  S
  is denoted  Sn
 . For example,  {0,1}3
  is the set of all 3-bit sequences:

{0,1}3={(0,0,0),(0,0,1),(0,1,0),(0,1,1),(1,0,0),(1,0,1),(1,1,0),(1,1,1)}
 
 

3Some texts call them ordered pairs.

A function assigns an element of one set, called the domain, to an element of another set, called the codomain. The notation

f:A→B
 
indicates that  f
  is a function with domain,  A
 , and codomain,  B
 . The familiar notation “ f(a)=b
 ” indicates that  f
  assigns the element  b∈B
  to  a
 . Here  b
  would be called the value of  f
  at argument  a
 .

Functions are often defined by formulas, as in:

f1(x)::=1x2
 
where  x
  is a real-valued variable, or

f2(y,z)::=y10yz
 
where  y
  and  z
  range over binary strings, or

f3(x,n)::=the length n sequence (x,…,x)n x's
 
where  n
  ranges over the nonnegative integers.

A function with a finite domain could be specified by a table that shows the value of the function at each element of the domain. For example, a function  f4(P,Q)
  where  P
  and  Q
  are propositional variables is specified by:

PTTFFQTFTFf4(P,Q)TFTT
 
Notice that  f4
  could also have been described by a formula:

f4(P,Q)::=[P IMPLIES Q].
 
A function might also be defined by a procedure for computing its value at any element of its domain, or by some other kind of specification. For example, define  f5(y)
  to be the length of a left to right search of the bits in the binary string  y
  until a 1 appears, so

f5(0010)f5(100)f5(0000)=3,=1, is undefined.
 
Notice that  f5
  does not assign a value to any string of just 0’s. This illustrates an important fact about functions: they need not assign a value to every element in the domain. In fact this came up in our first example  f1(x)=1/x2
 , which does not assign a value to 0. So in general, functions may be partial functions, meaning that there may be domain elements for which the function is not defined. If a function is defined on every element of its domain, it is called a total function.

It’s often useful to find the set of values a function takes when applied to the elements in a set of arguments. So if  f:A→B
 , and  S
  is a subset of  A
 , we define  f(S)
  to be the set of all the values that  f
  takes when it is applied to elements of  S
 . That is,

f(S)::={b∈B∣f(s)=b for some s∈S}
 
For example, if we let  [r,s]
  denote set of numbers in the interval from  r
  to  s
  on the real line, then  f1([1,2])=[1/4,1].
 
For another example, let’s take the “search for a 1” function,  f5
 . If we let  X
  be the set of binary words which start with an even number of 0’s followed by a 1, then  f5(X)
  would be the odd nonnegative integers.

Applying  f
  to a set,  S
 , of arguments is referred to as “applying  f
  pointwise to  S
 ”, and the set  f(S)
  is referred to as the image of  S
  under  f
 .4 The set of values that arise from applying  f
  to all possible arguments is called the range of  f
 . That is,

range(f)::=f(domain(f)).
 
Some authors refer to the codomain as the range of a function, but they shouldn’t. The distinction between the range and codomain will be important later in Sections 4.5 when we relate sizes of sets to properties of functions between them.

Function Composition
Doing things step by step is a universal idea. Taking a walk is a literal example, but so is cooking from a recipe, executing a computer program, evaluating a formula, and recovering from substance abuse.

Abstractly, taking a step amounts to applying a function, and going step by step corresponds to applying functions one after the other. This is captured by the operation of composing functions. Composing the functions  f
  and  g
  means that first  f
  is applied to some argument,  x
 , to produce  f(x)
 , and then  g
  is applied to that result to produce  g(f(x))
 .

Definition  4.3.1
 

For functions  f:A→B
  and  g:B→C
 , the composition,  g∘f
 , of  g
  with  f
  is defined to be the function from  A
  to  C
  defined by the rule:

(g∘f)(x)::=g(f(x)),
 
for all  x∈A.
 
Function composition is familiar as a basic concept from elementary calculus, and it plays an equally basic role in discrete mathematics.

 

4There is a picky distinction between the function  f
  which applies to elements of  A
  and the function which applies  f
  pointwise to subsets of  A
 , because the domain of  f
  is  A
 , while the domain of pointwise- f
  is pow (A)
 . It is usually clear from context whether  f
  or pointwise- f
  is meant, so there is no harm in overloading the symbol  f
  in this way.
