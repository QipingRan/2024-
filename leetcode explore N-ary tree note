https://leetcode.com/explore/learn/card/n-ary-tree/132/conclusion/924/

To solve the problem of N-ary Tree postorder traversal, you can use a recursive or iterative approach. In postorder traversal, you visit the children of a node before visiting the node itself. Here's how you can implement this:

### Recursive Approach

1. Define a recursive function that processes each node's children first.
2. Collect the values of the nodes during the traversal.

Here's the Python code for the recursive approach:

```python
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children if children is not None else []

class Solution:
    def postorder(self, root: 'Node') -> List[int]:
        def traverse(node: 'Node', result: List[int]):
            if node:
                for child in node.children:
                    traverse(child, result)
                result.append(node.val)
        
        result = []
        traverse(root, result)
        return result
```

### Iterative Approach

1. Use a stack to simulate the call stack of the recursion.
2. Traverse the tree iteratively and collect the values in reverse postorder.
3. Reverse the collected values at the end to get the correct postorder.

Here's the Python code for the iterative approach:

```python
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children if children is not None else []

class Solution:
    def postorder(self, root: 'Node') -> List[int]:
        if not root:
            return []
        
        stack, result = [root], []
        
        while stack:
            node = stack.pop()
            result.append(node.val)
            for child in node.children:
                stack.append(child)
        
        return result[::-1]
```

### Explanation of the Iterative Approach:

1. **Initialization**: Start with the root node in the stack.
2. **Processing Nodes**: Pop nodes from the stack, append their values to the result list, and push their children onto the stack.
3. **Reversing the Result**: Since we traverse the nodes in a root-last order and append the node values in reverse order of the desired output, we need to reverse the result list before returning it.

These solutions cover both the recursive and iterative approaches to perform postorder traversal on an N-ary tree. Choose the one that best suits your needs and preferences.

To solve the problem of N-ary Tree level order traversal, you can use a breadth-first search (BFS) approach. BFS is naturally suited for level order traversal since it processes nodes level by level.

### Steps for BFS Level Order Traversal:

1. Use a queue to keep track of nodes to be processed at each level.
2. Start with the root node and process each level by dequeuing nodes from the queue and enqueuing their children.

Here's the Python code to achieve this:

```python
from collections import deque
from typing import List

# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children if children is not None else []

class Solution:
    def levelOrder(self, root: 'Node') -> List[List[int]]:
        if not root:
            return []
        
        result = []
        queue = deque([root])
        
        while queue:
            level_size = len(queue)
            current_level = []
            
            for _ in range(level_size):
                node = queue.popleft()
                current_level.append(node.val)
                for child in node.children:
                    queue.append(child)
            
            result.append(current_level)
        
        return result
```

### Explanation:

1. **Initialization**: 
   - Check if the root is `None`. If it is, return an empty list.
   - Initialize the result list to store the values of nodes level by level.
   - Initialize a queue and add the root node to it.

2. **Processing Levels**:
   - While the queue is not empty, determine the number of nodes at the current level (i.e., the length of the queue).
   - Initialize an empty list to store the values of nodes at the current level.
   - Dequeue nodes one by one from the queue, append their values to the current level list, and enqueue their children.

3. **Storing Results**:
   - After processing all nodes at the current level, append the current level list to the result list.

4. **Return Result**: 
   - After processing all levels, return the result list.

This approach ensures that nodes are processed level by level, and their values are collected in the correct order.

To find the maximum depth of an N-ary tree, you can use a recursive depth-first search (DFS) approach. The idea is to traverse each path from the root to the leaves and keep track of the maximum depth encountered.

### Recursive Approach

1. If the tree is empty, the depth is 0.
2. For each node, recursively calculate the depth of its children.
3. The maximum depth for the node is the maximum depth of its children plus one (to account for the node itself).

Here's the Python code for the recursive approach:

```python
# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children if children is not None else []

class Solution:
    def maxDepth(self, root: 'Node') -> int:
        if not root:
            return 0
        
        if not root.children:
            return 1
        
        max_child_depth = max(self.maxDepth(child) for child in root.children)
        return max_child_depth + 1
```

### Explanation:

1. **Base Case**: 
   - If the root is `None`, return a depth of 0.
   - If the root has no children, return a depth of 1.

2. **Recursive Case**:
   - For each child of the root, recursively find its depth.
   - The maximum depth for the root is the maximum depth of its children plus one.

This approach ensures that you traverse the entire tree and compute the maximum depth efficiently.

### Iterative Approach (Optional)

Alternatively, you can use an iterative approach with a queue to perform a level-order traversal and keep track of the depth.

Here's the Python code for the iterative approach:

```python
from collections import deque

# Definition for a Node.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children if children is not None else []

class Solution:
    def maxDepth(self, root: 'Node') -> int:
        if not root:
            return 0
        
        queue = deque([(root, 1)])
        max_depth = 0
        
        while queue:
            node, depth = queue.popleft()
            max_depth = max(max_depth, depth)
            for child in node.children:
                queue.append((child, depth + 1))
        
        return max_depth
```

### Explanation of the Iterative Approach:

1. **Initialization**:
   - Check if the root is `None`. If it is, return a depth of 0.
   - Initialize a queue and add the root node with its depth (1).

2. **Processing Nodes**:
   - While the queue is not empty, dequeue a node and its depth.
   - Update the maximum depth encountered.
   - Enqueue all children of the current node with their depth (current depth + 1).

3. **Return Result**:
   - After processing all nodes, return the maximum depth encountered.

This iterative approach also ensures that you traverse the entire tree and compute the maximum depth correctly. Choose the approach that best suits your needs and preferences.
To encode an N-ary tree into a binary tree and then decode it back to the original N-ary tree, we need to define a strategy for mapping the N-ary tree nodes to binary tree nodes and vice versa.

### Encoding N-ary Tree to Binary Tree

The common approach is to use the left-child right-sibling (LC-RS) representation. In this representation:
1. The first child of each node in the N-ary tree becomes the left child in the binary tree.
2. The next sibling of each child in the N-ary tree becomes the right child in the binary tree.

### Decoding Binary Tree to N-ary Tree

To decode, we simply reverse the process:
1. The left child in the binary tree corresponds to the first child in the N-ary tree.
2. The right child in the binary tree corresponds to the next sibling in the N-ary tree.

### Implementation

Here's the Python code for both encoding and decoding:

```python
# Definition for a Node in an N-ary tree.
class Node:
    def __init__(self, val=None, children=None):
        self.val = val
        self.children = children if children is not None else []

# Definition for a Node in a binary tree.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right

class Codec:
    def encode(self, root: 'Node') -> TreeNode:
        if not root:
            return None
        
        binary_root = TreeNode(root.val)
        if root.children:
            binary_root.left = self.encode(root.children[0])
        
        current = binary_root.left
        for child in root.children[1:]:
            current.right = self.encode(child)
            current = current.right
        
        return binary_root

    def decode(self, root: TreeNode) -> 'Node':
        if not root:
            return None
        
        nary_root = Node(root.val, [])
        current = root.left
        while current:
            nary_root.children.append(self.decode(current))
            current = current.right
        
        return nary_root
```

### Explanation

#### Encoding:
1. **Base Case**: If the N-ary tree root is `None`, return `None`.
2. **Create Root**: Create the root of the binary tree with the same value as the N-ary tree root.
3. **Encode First Child**: If the root has children, encode the first child and set it as the left child of the binary root.
4. **Encode Siblings**: Traverse the remaining children, encoding each one and setting it as the right child of the previous binary tree node.

#### Decoding:
1. **Base Case**: If the binary tree root is `None`, return `None`.
2. **Create Root**: Create the root of the N-ary tree with the same value as the binary tree root.
3. **Decode Children**: Traverse the left child and right siblings in the binary tree, decoding each one and adding it to the children of the N-ary tree root.

This approach ensures that the N-ary tree can be accurately encoded into a binary tree and then decoded back to the original N-ary tree structure.

