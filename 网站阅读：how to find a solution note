https://www.topcoder.com/thrive/articles/How%20To%20Find%20a%20Solution?fbclid=IwZXh0bgNhZW0CMTEAAR0a9Wu2dqm2vIfMQk_darBwp6MccikMZyWJHVL9PQmPkcpJnChTx0kkplI_aem_ZmFrZWR1bW15MTZieXRlcw#introduction

在论坛中讨论这篇文章。


简介
不需要特殊技术的简单问题
广度优先搜索 (BFS)
洪水填充<
蛮力和回溯
蛮力
回溯
动态规划
硬钻
最大流
最佳配对匹配
线性规划 (单纯形)
结论


广度优先搜索（BFS）
使用 BFS 的问题通常要求找到从起始点到达某个终点（状态）所需的最少步数（或最短路径）。除此之外，还提供从一点到达另一点的某些方式，所有这些方式的成本都是 1（有时可能等于另一个数字）。通常会给出一个 N x M 表（由 N 行和 M 列组成），其中某些单元格可以通过，其他单元格无法通过，问题的目标是找到从起始点到达终点所需的最短时间/路径。这样的表格可能代表迷宫、地图、城市和其他类似的东西。这些可以被视为经典的 BFS 问题。由于 BFS 复杂度在大多数情况下是线性的（有时是二次的，或 N logN），因此 N（或 M）的约束可能很高 - 甚至高达 100 万。

SmartWordToy – SRM 233 Div 1：
给出一个由四个拉丁小写字母组成的单词。单击一下按钮，即可按字母顺序将任意字母更改为上一个或下一个字母（例如，可以将“c”更改为“b”或“d”）。字母表是循环的，因此单击一下，可以将“a”变为“z”，而“z”变为“a”。

还给出了一组约束，每个约束定义一组禁词。约束由 4 个字母字符串组成。如果单词的每个字符都包含在单个约束的相应字符串中，即第一个字母包含在第一个字符串中，第二个字母包含在第二个字符串中，依此类推，则该单词是禁词。例如，约束“lf a tc e”定义了单词“late”、“fate”、“lace”和“face”。

您应该找到从单词 start 到达单词 finish 所需的最少按钮按下次数，而不经过禁词，如果这不可能，则返回 -1。


问题提示：

单词可以视为状态。最多有 26^4 个由 4 个字母组成的不同单词（因此在允许的时间内将运行线性复杂度）。


有一些方法可以从一种状态转移到另一种状态。


从一个状态转移到另一个状态的成本始终为 1（即单击一次按钮）。


您需要找到从开始状态到达结束状态所需的最少步数。

一切都表明这是一个借助 BFS 解决的问题。在任何其他 BFS 问题中都可以找到类似的东西。现在让我们看一个有趣的 BFS 问题案例。

CaptureThemAll – SRM 207 Div 2（第 3 个问题）：
Harry 正在下棋。他有一个骑士，而他的对手 Joe 有一个皇后和一个车。找出 Harry 的骑士需要跳多少步才能同时​​捕获皇后和车。
问题提示：乍一看，这似乎像是动态规划或回溯。但一如既往，看看语句的文本。过了一会儿，你应该会观察到以下事情：

给出了一张表格。


骑士可以从一个单元格跳到它的一些邻居单元格。


从一个单元格移动到另一个单元格的成本始终为 1（仅一次跳跃）。


您需要找到最少的步数（跳跃数）。

根据这些信息，我们可以看出，借助 BFS 可以轻松解决该问题。不要对连通点由不连通单元格表示这一事实感到困惑。将单元格视为图形中的点或状态（无论您想要什么）——为了从一个点传递到另一个点，骑士应该能够从第一个点跳到第二个点。
再次注意，关于 BFS 解决方案最能说明问题的提示是任何跳跃的成本都是 1。
通过以下示例训练自己找到 BFS 问题的提示：
其他示例：
RevolvingDoors – SRM 223 Div 1。WalkingHome –
SRM 222 Div 1。TurntableService – SRM 219 Div 1。




洪水填充
有时您可能会遇到借助洪水填充解决的问题，洪水填充是一种使用 BFS 查找所有可到达点的技术。它们与上面描述的 BFS 问题的不同之处在于不需要最小路径/成本。
例如，想象一个迷宫，其中 1 表示不可通行的单元格，0 表示可通行的单元格。您需要找到从左上角可到达的所有单元格。解决方案非常简单 - 逐个访问一个顶点，将其未访问的邻居添加到已访问顶点队列中，并在队列仍填充时继续下一个顶点。请注意，在大多数情况下，由于堆栈溢出，DFS（深度优先搜索）不适用于此类问题。最好使用 BFS。对于没有经验的用户来说，它可能看起来更难实现，但经过一点培训后，它就变得“小菜一碟”。此类问题的一个很好的例子是：

grafixMask – SRM 211 Div 1：
给出了一个 400 x 600 的位图。一组矩形覆盖了该位图的某些部分（矩形的角具有整数坐标）。您需要找到所有相邻的未覆盖区域，包括它们的大小。
问题提示：这里我们有什么？

地图（表格）


某些点是不可通行的（给定矩形覆盖的点）


需要找到连续的区域

很容易理解，有这种语句的问题需要使用 Flood Fill。通常使用它的问题很容易被发现。

蛮力法和回溯法
我将这两种技术归为同一类别，因为它们非常相似。它们都做同样的事情——尝试所有可能的情况（情况）并选择最佳情况，或仅计算所需的情况（取决于问题）。实际上，回溯法比蛮力法更先进、更优化。它通常使用递归，适用于约束较少的问题（例如 N<=20）。

GeneralChess – SRM 197 Div 1：
您获得了一些骑士（最多 8 个），它们在桌子上的位置为 (-10000<=x, y<=10000)。您需要找到放置另一个骑士的所有位置，以便威胁所有给定的棋子。
问题提示：好吧，这是最简单的例子之一。那么这个语句的提示是什么？

您需要找到满足特定规则（威胁所有给定棋子）的所有可能情况（位置）。


限制非常低 — — 最多只能给出 8 名骑士。

这是常见的暴力问题陈述。请注意，x 和 y 限制无关紧要，因为您只需尝试所有威胁其中一个骑士的位置。对于每个位置，查看位于该位置的骑士是否也威胁所有其他位置。
另一个有趣的问题是：

LargestCircle – SRM 212 Div 2（第 3 个问题）：
给定一个规则的正方形网格，其中标记了一些正方形，找出您可以在网格上绘制的最大圆，该圆不穿过任何标记的正方形。圆必须以网格点（正方形的角）为中心，半径必须是整数。返回圆的半径。网格

的大小最多为 50。
问题提示：同样，最重要的提示之一是网格大小的下限——只有 50。这个问题可以借助蛮力来解决，因为对于每个单元格，您可以尝试找到中心位于该单元格且符合规则的圆。在找到的所有圆中，选择半径最大的圆。
复杂度分析：最多有 50×50 个单元格，圆的半径是整数，最多为 25 个单位，并且您需要线性时间（取决于您的实现）来搜索位于圆边界上的单元格。总复杂度很低，因此您可以在此处应用简单的暴力破解。
其他示例：
Cafeteria - SRM 229 Div 1
WordFind - SRM 232 Div 1
回溯
这种技术可用于多种类型的问题。只需看一下极限（N、M 和其他主要参数）。它们是回溯问题的主要提示。如果这些极限非常小，并且您还没有找到更易于实施的解决方案，那么就不要浪费时间寻找它，而是实施直接的回溯解决方案。
通常这种类型的问题要求你找到（类似于蛮力）：
1.
项目的每种可能配置（子集）。这些配置应遵循一些给定的规则。
2.
3.
遵循某些给定规则的“最佳”配置（子集）。
4.

过桥– SRM 146 Div 2（第 3 个问题）：
一群人正在过一座旧桥。这座桥一次只能容纳两个人。天很黑，所以他们不能不带手电筒就走，而他们只有一个手电筒！此外，过桥所需的时间因人而异。当人们一起走时，他们总是以最慢的人的速度行走。把手电筒扔过桥是不可能的，所以总有一个人必须带着手电筒回到其他人身边。让所有人过桥至少需要多长时间？

最多有 6 个人。
问题提示：

首先看看约束条件——最多只有 6 个人！这足以生成所有可能的排列、集合等。


将人员从一边转移到另一边有多种不同的可能方法，您需要找到最佳方法。

这当然是一个用回溯法解决的问题：一开始选择任意两个人先通过桥，之后每一步都尝试通过留在起始侧的任何人。从所有这些通道中选择所需时间最短的通道。请注意，在通过桥的人中，速度最快的人应该返回（这比返回速度较慢的人要好）。这一事实使代码更容易实现。意识到这些事情后，只需编写解决方案即可。可能还有其他解决方案，但与编写此解决方案相比，寻找另一个解决方案会花费更多时间。

MNS – SRM 148 Div 1：
需要将 9 个数字排列在一个魔数方块中。魔数方块是排列成每行和每列的总和相同的数字方块。给定 9 个数字，范围从 0 到 9（含 0 和 9）。返回它们在魔数方块中排列的不同方式的数量。如果两个魔数方块在一个或多个位置的值不同，则它们不同。
问题提示：最多只给出 9 个数字；并且应该找到每一种不同的方式（配置）来排列这些数字，使得它们形成一个神奇的数字方块。
这些是回溯问题的主要属性。如果您已经观察到它们，请考虑代码。您可以生成所有数字排列，并检查每个数字是否形成魔方。如果是，则将其添加到答案中。请注意，它必须是唯一的。一种可能的方法是拥有一个先前发现的配置列表，因此对于每个新的魔方，检查它是否存在于该列表中，如果不存在，则将其添加到答案中。不会有很多不同的魔方，因此应用此方法时不会出现其他问题。
其他例子：
WeirdRooks - SRM 234 Div 1

动态规划
相当多的问题都是借助这种技术解决的。知道如何检测这类问题非常有价值。然而要做到这一点，人们必须具备一些动态规划方面的经验。通常，DP 问题有一些主要的整数变量（例如 N），它们既不太小，也不太大——因此通常的 DP 复杂度 N^2、N^3 等可以在时间上满足要求。请注意，如果 N 非常小（对于 TC 问题通常小于 30），那么该问题很可能不是 DP 问题。除此之外，应该存在状态和一种或多种方法（规则）从另一个较低状态到达一个较大状态。此外，较大状态应该仅依赖于较低状态。什么是所谓的状态？它只是一种特定的配置或情况。为了更好地理解动态规划，您可能需要阅读这篇文章。

我们来分析一个简单的经典 DP 问题：

给定 N 个硬币及其价值 (V1, V2, … ,VN) 的列表，以及总和 S。找出总和为 S 的最少硬币数量（您可以使用任意数量的同类型硬币），或者报告无法以总和为 S 的方式选择硬币。

设 N <= 1,000 且 S <= 1,000。
问题提示：

给出了两个主要整数变量（N 和 S）。它们既不太小，也不太大（即 N*S 的复杂度适合时间）。


状态可以定义为达到一定数量所需的最少硬币数量。


和 (状态) i 仅取决于较低的和 (状态) j (j<i)。


通过将硬币添加到一定金额，即可达到另一个更大的金额。这是从一个状态转移到另一个状态的方式。

因此，DP 问题的所有属性都在此语句中得到揭示。让我们看看另一个（稍微难一点的）DP 问题：

ZigZag – 2003 TCCC 半决赛 3：
如果连续数字之间的差严格在正负之间交替，则数字序列称为锯齿序列。第一个差（如果存在）可以是正的也可以是负的。元素少于两个的序列显然是锯齿序列。给定一个整数序列，返回锯齿序列中最长子序列的长度。子序列是通过从原始序列中删除一些元素（可能是零）而获得的，其余元素保持其原始顺序。假设该序列包含 1 到 50 个元素（含）。
问题提示：

给出了 N 个数字（1<=N<=50），因此 N 不会太小，也不会太大。


状态 (i,d) 可以定义为以第 i 个数字结尾的最长锯齿形子序列的长度，当 d=0 时，该子序列的最后一个数字小于该子序列，当 d=1 时，该子序列的最后一个数字大于该子序列。


状态 i（即以第 i 个数字结尾的子序列）仅依赖于较低的状态 j（j<i）。


通过在子序列的末尾添加一个数字，可以创建另一个更大（更大）的子序列。这是从一个状态转移到另一个状态的方法。

如您所见，此陈述与上一个问题具有几乎相同的特征（模式）。识别 DP 问题陈述最困难的部分是观察/查看具有上述属性的状态。一旦您能做到这一点，下一步就是构建算法，这超出了本文的范围。
其他示例：
ChessMetric - 2003 TCCC 第 4 轮
AvoidRoads - 2003 TCO 半决赛 4
FlowerGarden - 2004 TCCC 第 1 轮
BadNeighbors - 2004 TCCC 第 4 轮

艰苦训练：
最大流量
在许多情况下，很难发现使用最大流解决方案的问题。通常，您必须根据问题陈述创建/定义具有容量的图表。
以下是最大流问题的一些迹象：

看一下约束，它们必须适合 O(N^3) 或 O(N^4) 解决方案，即在极端情况下 N 不应大于 500（通常小于 100）。


应该有一个具有给定容量的边的图，或者您应该能够根据语句中给出的数据来定义/创建它。


您应该找到某个事物的最大值。


示例问题：

给你一份水管列表，每根水管都有一定的最大水流量。水管的末端连接在一起。

你必须找出单位时间内从起始连接点流到终止连接点的最大水量。

设 N<=100。
如您所见，这是一个直接的最大流问题：水管代表图的边，它们的连接点代表顶点；您必须找到单位时间内从起点流到终点的最大水量。

最佳配对匹配：
这些问题通常有一个项目列表（来自集合 A），其他项目（来自集合 B）应根据某些规则分配给这些项目，以便集合 A 中的所有（或最大可能数量的）项目都必须分配给集合 B 中的某个项目。
混合：
有些问题除了网络流之外还需要其他技术。

停车- SRM 236 Div 1：
给定 N 辆车和 M 个停车场。它们位于一个矩形表面（由一张桌子表示），其中某些单元格无法通行。您应该找到一种方法将每辆车分配到一个停车场，以便每辆车到其指定停车场的最短距离中的最大值尽可能小。每个停车场最多可以分配一辆汽车。

问题提示：通过阅读此问题，可以简单地了解解决方案的主要思想——它应该类似于最佳配对，因为每辆车（来自集合 A 的点）都应分配给一个停车场（来自集合 B 的点），以便所有车辆都分配到停车场，并且最多有一辆汽车被分配到停车场。此外，可能有些汽车无法到达某些停车场，因此某些点对（一个来自 A 的点和另一个来自 B 的点）不相连。但是应该创建一个图来实现最佳配对。使其清晰的方法很明确——如果汽车和停车场之间有一条路径，并且其成本等于汽车到达停车场所需的最短距离，则汽车和停车场之间存在一条边。解决方案的下一步是对最长边进行二分搜索。虽然这可能超出了本文的范围，但我将提供一个简短的解释：在每个步骤中删除初始图中成本大于某个值 C 的那些边（请注意，您必须保存初始图的状态才能对其他 C 值重复此步骤）。如果在这种情况下可以将所有汽车分配到停车场，则取一个较小的 C，然后重复相同的操作。如果不能，则取一个较大的 C。经过完全二分查找后，将找到可以完全分配的最小 C。这就是答案。

线性规划（单纯形）
借助线性规划技术解决的问题大多数具有以下共同特征：

您将获得一系列具有不同成本/重量的物品。每件物品都有一定数量，您必须达到这些数量。


给出了一个集合列表。这些集合由一些可用物品组成，每个物品都有一定数量。每个集合都有一定的成本。


该问题的目标是找到这些集合中的最优组合（最便宜的组合），使得其中每个项目的数量总和恰好等于需要实现的数量。

一开始它可能看起来很混乱，但让我们看一个例子：

混合物- SRM 231 Div 1：
需要精确混合多种不同化学品，每种化学品都有一定数量。某些化学品混合物可以以一定价格购买（混合物的化学成分可能不是纯的）。每种混合物都含有一定数量的某些化学品。您不需要以整数数量购买可用的混合物。因此，如果您购买 1.5 份价格为 3 份且数量为“2 0 1”的混合物，您将支付 4.5 份并获得“3 0 1.5”份化学品。您的任务是确定可以实现所需混合物的最低价格。

问题提示：

物品（化学品）的集合。


一系列集合（可用的混合物），每个集合包含一定数量的各种物品，并且具有一定的成本。


您需要找到通过组合现有套装而获得的所需物品集合的最低价格。不仅如此，您还可以获取非整数数量的混合物。

这些正是上面描述的特征。

